{"version":3,"sources":["components/YoutubePlayer.js","components/SocketContext.js","components/GameContext.js","components/ModalWinner.js","components/StartRound.js","components/Emojis.js","components/Answers.js","components/LifeBar.js","serviceWorker.js","index.js","App.js","img/trophy.gif","img/vs.png","img/victory.gif"],"names":["YoutubePlayer","props","state","gameSettings","data","this","question","id","setState","event","YouTube","videoId","idVideo","opts","height","width","playerVars","autoplay","controls","onReady","_onReady","Component","SocketContext","React","createContext","GameContext","ModalWinner","useContext","socket","useState","showModal","setShowModal","close","useEffect","Button","variant","onClick","Modal","show","onHide","animation","size","aria-labelledby","centered","Header","closeButton","Title","className","round","Body","src","trophy","alt","isStreamerWinner","isChatWinner","Footer","emit","StartRound","startRound","bind","Consumer","totalVotes","Container","Row","Col","xs","lg","emojis","Answers","setSocket","title","playButton","setPlayButton","url_emoji","emoji","Emojis","isPlay","isActive","Provider","value","Table","striped","bordered","hover","answers","text","votes","toFixed","LifeBar","winner","fluid","ProgressBar","style","now","lifeBar","lifeStreamer","key","vsImg","lifeChat","Boolean","window","location","hostname","match","ReactDOM","render","display","justifyContent","alignItems","styleYT","setGameSettings","isReady","setIsReady","youtubeOff","setYoutubeOff","idLive","pathname","split","console","log","url","Date","includes","protocol","socketIOClient","on","victory","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.d0faf74c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport YouTube from \"react-youtube\";\n\nexport default class YoutubePlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameSettings: this.props.gameSettings\n    };\n    //console.log(this.state.gameSettings);\n  }\n  componentWillUpdate(data) {\n    // console.log(\"X\");\n    // console.log(this.state.gameSettings);\n    // console.log(data.gameSettings);\n    if (this.state.gameSettings.question.id !== data.gameSettings.question.id) {\n      //console.log(data);\n      this.setState({\n        gameSettings: data.gameSettings\n      });\n    }\n  }\n  _onReady(event) {\n    // access to player in all event handlers via event.target\n    //event.target.pauseVideo();\n    //console.log(event.target.getCurrentTime());\n  }\n  render() {\n    const opts = {\n      height: \"450\",\n      width: \"800\",\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 0,\n        controls: 1\n      }\n    };\n    return (\n      <div>\n        <YouTube\n          videoId={this.state.gameSettings.question.idVideo}\n          opts={opts}\n          onReady={this._onReady}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst SocketContext = React.createContext();\n\nexport default SocketContext;\n","import React from \"react\";\n\nconst GameContext = React.createContext();\n\nexport default GameContext;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport SocketContext from \"./SocketContext\";\nimport GameContext from \"./GameContext.js\";\nimport trophy from \"./../img/trophy.gif\";\n\nexport default function ModalWinner() {\n  // constructor(props) {\n  //   super(props);\n  //    = {\n  //     gameSettings: .propsgameSettings,\n  //     showModal: false,\n  //     buttonDisabled: true\n  //   };\n  //   .close = .close.bind();\n  //   .open = .open.bind();\n  //   .nextRound = .nextRound.bind();\n  //   .whoIsWinner = .whoIsWinner.bind();\n  // }\n  const gameSettings = useContext(GameContext);\n  const socket = useContext(SocketContext);\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {}, [gameSettings]);\n\n  function close() {\n    setShowModal(false);\n  }\n\n  function open() {\n    setShowModal(true);\n  }\n  function nextRound() {\n    if (\n      !gameSettings.question.isStreamerWinner &&\n      !gameSettings.question.isChatWinner\n    ) {\n    } else {\n      close();\n      socket.emit(\"nextQuestion\");\n    }\n  }\n\n  function whoIsWinner() {\n    if (\n      !gameSettings.question.isStreamerWinner &&\n      !gameSettings.question.isChatWinner\n    ) {\n      return \"Ainda ninguém\";\n    } else {\n      if (gameSettings.question.isStreamerWinner) {\n        return \"Streamer VENCEU\";\n      }\n      if (gameSettings.question.isChatWinner) {\n        return \"Chat VENCEU\";\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Button variant=\"outline-primary\" onClick={open}>\n        RESULTADO\n      </Button>\n      <Modal\n        show={showModal}\n        onHide={close}\n        animation={false}\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <div className=\"text-center\">\n              Resultado da rodada {gameSettings.round}\n            </div>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"text-center\">\n            <img src={trophy} width=\"400vw\" alt=\"VS\" />\n            <br />\n            <h1>{whoIsWinner()}</h1>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"success\" onClick={nextRound}>\n            Próxima Rodada\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport SocketContext from \"./SocketContext\";\nimport GameContext from \"./GameContext.js\";\n\nexport default class StartRound extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //gameSettings: this.props.gameSettings,\n      showModal: false,\n      socket: null\n    };\n    this.startRound = this.startRound.bind(this);\n  }\n  startRound() {\n    this.state.socket.emit(\"nextRound\");\n  }\n  render() {\n    return (\n      <div>\n        <SocketContext.Consumer>\n          {socket => {\n            if (this.state.socket !== socket) {\n              this.setState({ socket: socket });\n            }\n          }}\n        </SocketContext.Consumer>\n        <GameContext.Consumer>\n          {gameSettings => {\n            if (this.state.gameSettings) {\n              if (\n                this.state.gameSettings.question.totalVotes !==\n                gameSettings.question.totalVotes\n              ) {\n                //console.log(data);\n                this.setState({\n                  gameSettings: gameSettings\n                });\n              }\n            } else {\n              this.setState({\n                gameSettings: gameSettings\n              });\n            }\n          }}\n        </GameContext.Consumer>\n        <Container>\n          <Row className=\"justify-content-md-center\">\n            <Col xs lg=\"12\" className=\"text-center\">\n              <Button variant=\"success\" size=\"lg\" onClick={this.startRound}>\n                Iniciar rodada\n              </Button>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","// images.js\nlet emojis = {\n  \"👾\": \"alien-monster\",\n  \"💣\": \"bomb\",\n  \"🤡\": \"clown-face\",\n  \"💨\": \"dash-symbol\",\n  \"👽\": \"extraterrestrial-alien\",\n  \"😱\": \"face-screaming-in-fear\",\n  \"🤠\": \"face-with-cowboy-hat\",\n  \"🥶\": \"freezing-face\",\n  \"⭐\": \"white-medium-star\",\n  \"🤩\": \"grinning-face-with-star-eyes\",\n  \"💥\": \"collision-symbol\",\n  \"🤗\": \"hugging-face\",\n  \"💯\": \"hundred-points-symbol\",\n  \"👺\": \"japanese-goblin\",\n  \"👹\": \"japanese-ogre\",\n  \"💌\": \"love-letter\",\n  \"🤢\": \"nauseated-face\",\n  \"💩\": \"pile-of-poo\",\n  \"🤖\": \"robot-face\",\n  \"🤬\": \"serious-face-with-symbols-covering-mouth\",\n  \"☠️\": \"skull-and-crossbones\",\n  \"💀\": \"skull\",\n  \"😇\": \"smiling-face-with-halo\",\n  \"😈\": \"smiling-face-with-horns\",\n  \"🙊\": \"speak-no-evil-monkey\",\n  \"💦\": \"splashing-sweat-symbol\",\n  \"🤔\": \"thinking-face\",\n  \"💄\": \"lipstick\",\n  \"🙃\": \"upside-down-face\",\n  \"👋\": \"waving-hand-sign\",\n  \"🅱️\": \"negative-squared-latin-capital-letter\",\n  \"🚨\": \"police-cars-revolving-light\"\n};\n\nexport default emojis;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ModalWinner from \"./ModalWinner.js\";\nimport StartRound from \"./StartRound.js\";\nimport { Table, Container, Row, Col, Button } from \"react-bootstrap\";\nimport SocketContext from \"./SocketContext\";\nimport Emojis from \"./Emojis\";\nimport GameContext from \"./GameContext.js\";\n\nexport default function Answers() {\n  const gameSettings = useContext(GameContext);\n  const [socket, setSocket] = useState(null);\n  //const [gameSettings, setGameSettings] = useState(null);\n  const [playButton, setPlayButton] = useState({\n    title: \"Pause\",\n    variant: \"outline-warning\"\n  });\n\n  useEffect(() => {\n    let playButton = null;\n    if (gameSettings.question.isPlay === false) {\n      playButton = {\n        title: \"Play\",\n        variant: \"outline-primary\"\n      };\n    } else {\n      playButton = {\n        title: \"Pause\",\n        variant: \"outline-warning\"\n      };\n    }\n    setPlayButton(playButton);\n  }, [gameSettings]);\n\n  function url_emoji(emoji) {\n    let img = \"img/emojis/\" + Emojis[emoji] + \".png\";\n    return img;\n  }\n  function pause() {\n    let playButton = null;\n    if (!gameSettings.question.isPlay === false) {\n      playButton = {\n        title: \"Play\",\n        variant: \"outline-primary\"\n      };\n    } else {\n      playButton = {\n        title: \"Pause\",\n        variant: \"outline-warning\"\n      };\n    }\n    setPlayButton(playButton);\n    socket.emit(\"pause-play\");\n  }\n  if (gameSettings.question.isActive) {\n    return (\n      <div>\n        <GameContext.Provider value={gameSettings}>\n          <SocketContext.Consumer>\n            {socket => {\n              setSocket(socket);\n            }}\n          </SocketContext.Consumer>\n          <Container>\n            <Row className=\"justify-content-md-center\">\n              <h4>\n                {gameSettings.question.title} (\n                {gameSettings.question.totalVotes})\n              </h4>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n              <Table striped bordered hover variant=\"dark\">\n                <tbody>\n                  <tr>\n                    <td className=\"text-center align-middle\">\n                      <img\n                        src={url_emoji(gameSettings.question.answers[0].emoji)}\n                        width=\"45vw\"\n                        alt=\"img1\"\n                      />\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>{gameSettings.question.answers[0].text}</h4>\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>\n                        {gameSettings.question.answers[0].votes > 0\n                          ? (\n                              (gameSettings.question.answers[0].votes * 100) /\n                              gameSettings.question.totalVotes\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </h4>\n                    </td>\n                    <td className=\"text-center align-middle\">\n                      <img\n                        src={url_emoji(gameSettings.question.answers[1].emoji)}\n                        width=\"45vw\"\n                        alt=\"img1\"\n                      />\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>{gameSettings.question.answers[1].text}</h4>\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>\n                        {gameSettings.question.answers[1].votes > 0\n                          ? (\n                              (gameSettings.question.answers[1].votes * 100) /\n                              gameSettings.question.totalVotes\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </h4>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"text-center align-middle\">\n                      <img\n                        src={url_emoji(gameSettings.question.answers[2].emoji)}\n                        width=\"45vw\"\n                        alt=\"img1\"\n                      />\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>{gameSettings.question.answers[2].text}</h4>\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>\n                        {gameSettings.question.answers[2].votes > 0\n                          ? (\n                              (gameSettings.question.answers[2].votes * 100) /\n                              gameSettings.question.totalVotes\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </h4>\n                    </td>\n                    <td className=\"text-center align-middle\">\n                      <img\n                        src={url_emoji(gameSettings.question.answers[3].emoji)}\n                        width=\"45vw\"\n                        alt=\"img1\"\n                      />\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>{gameSettings.question.answers[3].text}</h4>\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>\n                        {gameSettings.question.answers[3].votes > 0\n                          ? (\n                              (gameSettings.question.answers[3].votes * 100) /\n                              gameSettings.question.totalVotes\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </h4>\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Row>\n            <br />\n            <br />\n            <Row className=\"justify-content-md-center\">\n              <Col xs lg=\"6\" className=\"text-center\">\n                <Button variant={playButton.variant} onClick={pause}>\n                  {playButton.title}\n                </Button>\n              </Col>\n              <Col xs lg=\"6\" className=\"text-center\">\n                <ModalWinner gameSettings={gameSettings} />\n              </Col>\n            </Row>\n          </Container>\n        </GameContext.Provider>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <StartRound gameSettings={gameSettings} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport GameContext from \"./GameContext.js\";\nimport vsImg from \"./../img/vs.png\";\nimport { ProgressBar, Container, Row, Col } from \"react-bootstrap\";\n\nexport default class LifeBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameSettings: this.props.gameSettings\n    };\n    this.round = this.round.bind(this);\n  }\n\n  round() {\n    if (this.state.gameSettings.winner) {\n      return \"FINAL\";\n    } else {\n      return \"Round \" + this.state.gameSettings.round;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <br />\n        <GameContext.Consumer>\n          {gameSettings => {\n            if (this.state.gameSettings) {\n              if (\n                this.state.gameSettings.question.totalVotes !==\n                gameSettings.question.totalVotes\n              ) {\n                //console.log(data);\n                this.setState({\n                  gameSettings: gameSettings\n                });\n              }\n            } else {\n              this.setState({\n                gameSettings: gameSettings\n              });\n            }\n          }}\n        </GameContext.Consumer>\n        <Container fluid>\n          <Row>\n            <Col xs lg=\"5\">\n              <ProgressBar style={{ height: 30 + \"px\" }}>\n                <ProgressBar\n                  variant=\"danger\"\n                  now={100 - this.state.gameSettings.lifeBar.lifeStreamer}\n                  key={1}\n                />\n                <ProgressBar\n                  variant=\"warning\"\n                  now={this.state.gameSettings.lifeBar.lifeStreamer}\n                  key={2}\n                />\n              </ProgressBar>\n            </Col>\n            <Col xs lg=\"2\">\n              <img src={vsImg} width=\"45vw\" alt=\"VS\" />\n            </Col>\n            <Col xs lg=\"5\">\n              <ProgressBar style={{ height: 30 + \"px\" }}>\n                <ProgressBar\n                  variant=\"warning\"\n                  now={this.state.gameSettings.lifeBar.lifeChat}\n                  key={1}\n                />\n                <ProgressBar\n                  variant=\"danger\"\n                  now={100 - this.state.gameSettings.lifeBar.lifeChat}\n                  key={2}\n                />\n              </ProgressBar>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs lg=\"5\" className=\"text-left\">\n              <h4>Streamer</h4>\n            </Col>\n            <Col xs lg=\"2\" className=\"text-center\">\n              <h4>{this.round()}</h4>\n            </Col>\n            <Col xs lg=\"5\" className=\"text-right\">\n              <h4>Chat</h4>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport YoutubePlayer from \"./components/YoutubePlayer.js\";\nimport Answers from \"./components/Answers.js\";\nimport socketIOClient from \"socket.io-client\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport SocketContext from \"./components/SocketContext.js\";\nimport GameContext from \"./components/GameContext.js\";\nimport LifeBar from \"./components/LifeBar.js\";\nimport victory from \"./img/victory.gif\";\n\nexport default function App() {\n  const [socket, setSocket] = useState(null);\n  const [styleYT] = useState({\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"..\",\n    height: \"..\"\n  });\n  const [gameSettings, setGameSettings] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n  const [youtubeOff, setYoutubeOff] = useState(false);\n\n  useEffect(() => {\n    let idLive = window.location.pathname.split(\"/\")[1];\n    console.log(window.location);\n\n    let url = \"http://localhost:21227?idLive=\" + idLive + \"&now=\" + Date.now();\n    if (window.location.hostname.includes(\"mrguinas\")) {\n      url =\n        window.location.protocol +\n        \"//mrguinas.com.br\" +\n        \":21227?idLive=\" +\n        idLive +\n        \"&now=\" +\n        Date.now();\n    }\n    console.log(url);\n    const socket = socketIOClient(url);\n    // const socket = socketIOClient(\n    //   window.location.protocol +\n    //     window.location.hostname +\n    //     \":21211!?idLive=\" +\n    //     idLive\n    // );\n    setYoutubeOff(true);\n    setSocket(socket);\n    socket.on(\"gameSettings\", gameSettings => {\n      console.log(gameSettings);\n      setGameSettings(gameSettings);\n      setIsReady(true);\n    });\n    socket.on(\"youtubeOff\", () => {\n      setYoutubeOff(true);\n      setIsReady(false);\n    });\n  }, []);\n\n  function notWorking() {\n    if (youtubeOff) {\n      return \"Utilize http://\" + window.location.hostname + \"/IDLIVEYOUTUBE\";\n    } else {\n      return \"Carregando...\";\n    }\n  }\n  function winner() {\n    return \"O \" + this.state.gameSettings.winner + \" VENCEU\";\n  }\n\n  if (isReady) {\n    if (gameSettings.winner) {\n      return (\n        <div className=\"App\">\n          <GameContext.Provider value={gameSettings}>\n            <SocketContext.Provider value={socket}>\n              <LifeBar gameSettings={gameSettings} />\n              <br />\n              <br />\n              <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                  <Col>\n                    <img src={victory} width=\"600vw\" alt=\"VS\" />\n                  </Col>\n                </Row>\n                <br />\n                <Row className=\"justify-content-md-center\">\n                  <Col>\n                    <h1>\n                      <b>{winner()}</b>\n                    </h1>\n                  </Col>\n                </Row>\n              </Container>\n            </SocketContext.Provider>\n          </GameContext.Provider>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <GameContext.Provider value={gameSettings}>\n            <SocketContext.Provider value={socket}>\n              <LifeBar gameSettings={gameSettings} />\n              <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                  <Col>\n                    <YoutubePlayer\n                      gameSettings={gameSettings}\n                      style={styleYT}\n                    />\n                  </Col>\n                </Row>\n                <br />\n                <br />\n                <Row className=\"justify-content-md-center\">\n                  <Col>\n                    <Answers gameSettings={gameSettings} />\n                  </Col>\n                </Row>\n              </Container>\n            </SocketContext.Provider>\n          </GameContext.Provider>\n        </div>\n      );\n    }\n  } else {\n    return <div>{notWorking()}</div>;\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/trophy.d9db92ab.gif\";","module.exports = __webpack_public_path__ + \"static/media/vs.2433496f.png\";","module.exports = __webpack_public_path__ + \"static/media/victory.59d065af.gif\";"],"sourceRoot":""}