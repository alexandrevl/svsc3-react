{"version":3,"sources":["components/GameContext.js","components/YoutubePlayer.js","components/SocketContext.js","components/ModalWinner.js","components/StartRound.js","components/Emojis.js","components/Answers.js","components/LifeBar.js","serviceWorker.js","index.js","App.js","img/trophy.gif","img/vs.png","img/victory.gif"],"names":["GameContext","React","createContext","Component","SocketContext","ModalWinner","gameSettings","useContext","socket","useState","showModal","setShowModal","close","useEffect","Button","variant","onClick","Modal","show","onHide","animation","size","aria-labelledby","centered","Header","closeButton","Title","id","className","round","Body","src","trophy","width","alt","question","isStreamerWinner","isChatWinner","Footer","emit","StartRound","Container","Row","Col","xs","lg","emojis","Answers","setSocket","title","playButton","setPlayButton","url_emoji","emoji","Emojis","isPlay","isActive","Provider","value","Consumer","totalVotes","Table","striped","bordered","hover","answers","text","votes","toFixed","LifeBar","fluid","ProgressBar","style","height","now","lifeBar","LIFE_STREAMER","lifeStreamer","key","vsImg","lifeChat","LIFE_CHAT","winner","Boolean","window","location","hostname","match","ReactDOM","render","setGameSettings","isReady","setIsReady","youtubeOff","setYoutubeOff","idLive","pathname","split","console","log","url","socketIOClient","on","victory","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.fdba2b83.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GameContext = React.createContext();\n\nexport default GameContext;\n","import React, { Component } from \"react\";\nimport YouTube from \"react-youtube\";\n\nexport default class YoutubePlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameSettings: this.props.gameSettings\n    };\n    //console.log(this.state.gameSettings);\n  }\n  componentWillUpdate(data) {\n    // console.log(\"X\");\n    // console.log(this.state.gameSettings);\n    // console.log(data.gameSettings);\n    if (this.state.gameSettings.question.id !== data.gameSettings.question.id) {\n      //console.log(data);\n      this.setState({\n        gameSettings: data.gameSettings\n      });\n    }\n  }\n  _onReady(event) {\n    // access to player in all event handlers via event.target\n    //event.target.pauseVideo();\n    //console.log(event.target.getCurrentTime());\n  }\n  render() {\n    const opts = {\n      height: \"450\",\n      width: \"800\",\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 0,\n        controls: 1\n      }\n    };\n    return (\n      <div>\n        <YouTube\n          videoId={this.state.gameSettings.question.idVideo}\n          opts={opts}\n          onReady={this._onReady}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst SocketContext = React.createContext();\n\nexport default SocketContext;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport SocketContext from \"./SocketContext\";\nimport GameContext from \"./GameContext.js\";\nimport trophy from \"./../img/trophy.gif\";\n\nexport default function ModalWinner() {\n  // constructor(props) {\n  //   super(props);\n  //    = {\n  //     gameSettings: .propsgameSettings,\n  //     showModal: false,\n  //     buttonDisabled: true\n  //   };\n  //   .close = .close.bind();\n  //   .open = .open.bind();\n  //   .nextRound = .nextRound.bind();\n  //   .whoIsWinner = .whoIsWinner.bind();\n  // }\n  const gameSettings = useContext(GameContext);\n  const socket = useContext(SocketContext);\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {}, [gameSettings]);\n\n  function close() {\n    setShowModal(false);\n  }\n\n  function open() {\n    setShowModal(true);\n  }\n  function nextRound() {\n    if (\n      !gameSettings.question.isStreamerWinner &&\n      !gameSettings.question.isChatWinner\n    ) {\n    } else {\n      close();\n      socket.emit(\"nextQuestion\");\n    }\n  }\n\n  function whoIsWinner() {\n    if (\n      !gameSettings.question.isStreamerWinner &&\n      !gameSettings.question.isChatWinner\n    ) {\n      return \"Ainda ninguém\";\n    } else {\n      if (gameSettings.question.isStreamerWinner) {\n        return \"Streamer VENCEU\";\n      }\n      if (gameSettings.question.isChatWinner) {\n        return \"Chat VENCEU\";\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Button variant=\"outline-primary\" onClick={open}>\n        RESULTADO\n      </Button>\n      <Modal\n        show={showModal}\n        onHide={close}\n        animation={false}\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <div className=\"text-center\">\n              Resultado da rodada {gameSettings.round}\n            </div>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"text-center\">\n            <img src={trophy} width=\"400vw\" alt=\"VS\" />\n            <br />\n            <h1>{whoIsWinner()}</h1>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"success\" onClick={nextRound}>\n            Próxima Rodada\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport SocketContext from \"./SocketContext\";\n//import GameContext from \"./GameContext.js\";\n\nexport default function StartRound() {\n  //const gameSettings = useContext(GameContext);\n  const socket = useContext(SocketContext);\n  function startRound() {\n    socket.emit(\"nextRound\");\n  }\n  return (\n    <div>\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col xs lg=\"12\" className=\"text-center\">\n            <Button variant=\"success\" size=\"lg\" onClick={startRound}>\n              Iniciar rodada\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","// images.js\nlet emojis = {\n  \"👽\": \"alien.svg\",\n  \"🤡\": \"clown_face.svg\",\n  \"👑\": \"crown.svg\",\n  \"👻\": \"ghost.svg\",\n  \"🍇\": \"grapes.svg\",\n  \"🍔\": \"hamburguer.svg\",\n  \"💋\": \"kiss.svg\",\n  \"👌\": \"ok_hand.svg\",\n  \"💩\": \"pile_of_poo.svg\",\n  \"🍍\": \"pineapple.svg\",\n  \"🍗\": \"poutlry_leg.svg\",\n  \"❤️\": \"red_heart.svg\",\n  \"💍\": \"ring.svg\",\n  \"🤖\": \"robot_face.svg\",\n  \"💀\": \"skull.svg\",\n  \"😍\": \"smiling_face_with_heart_eyes.svg\",\n  \"😎\": \"smiling_face_with_sunglasses.svg\",\n  \"🍓\": \"strawberry.svg\",\n  \"👍\": \"thumbs_up.svg\",\n  \"🍉\": \"watermelon.svg\"\n};\n\nexport default emojis;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ModalWinner from \"./ModalWinner.js\";\nimport StartRound from \"./StartRound.js\";\nimport { Table, Container, Row, Col, Button } from \"react-bootstrap\";\nimport SocketContext from \"./SocketContext\";\nimport Emojis from \"./Emojis\";\nimport GameContext from \"./GameContext.js\";\n\nexport default function Answers() {\n  const gameSettings = useContext(GameContext);\n  const [socket, setSocket] = useState(null);\n  //const [gameSettings, setGameSettings] = useState(null);\n  const [playButton, setPlayButton] = useState({\n    title: \"Pause\",\n    variant: \"outline-warning\"\n  });\n\n  useEffect(() => {\n    let playButton = null;\n    if (gameSettings.question.isPlay === false) {\n      playButton = {\n        title: \"Play\",\n        variant: \"outline-primary\"\n      };\n    } else {\n      playButton = {\n        title: \"Pause\",\n        variant: \"outline-warning\"\n      };\n    }\n    setPlayButton(playButton);\n  }, [gameSettings]);\n\n  function url_emoji(emoji) {\n    let img = \"img/emojis/\" + Emojis[emoji];\n    return img;\n  }\n  function pause() {\n    let playButton = null;\n    if (!gameSettings.question.isPlay === false) {\n      playButton = {\n        title: \"Play\",\n        variant: \"outline-primary\"\n      };\n    } else {\n      playButton = {\n        title: \"Pause\",\n        variant: \"outline-warning\"\n      };\n    }\n    setPlayButton(playButton);\n    socket.emit(\"pause-play\");\n  }\n  if (gameSettings.question.isActive) {\n    return (\n      <div>\n        <GameContext.Provider value={gameSettings}>\n          <SocketContext.Consumer>\n            {socket => {\n              setSocket(socket);\n            }}\n          </SocketContext.Consumer>\n          <Container>\n            <Row className=\"justify-content-md-center\">\n              <h4>\n                {gameSettings.question.title} (\n                {gameSettings.question.totalVotes})\n              </h4>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n              <Table striped bordered hover variant=\"dark\">\n                <tbody>\n                  <tr>\n                    <td className=\"text-center align-middle\">\n                      <img\n                        src={url_emoji(gameSettings.question.answers[0].emoji)}\n                        width=\"45vw\"\n                        alt=\"img1\"\n                      />\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>{gameSettings.question.answers[0].text}</h4>\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>\n                        {gameSettings.question.answers[0].votes > 0\n                          ? (\n                              (gameSettings.question.answers[0].votes * 100) /\n                              gameSettings.question.totalVotes\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </h4>\n                    </td>\n                    <td className=\"text-center align-middle\">\n                      <img\n                        src={url_emoji(gameSettings.question.answers[1].emoji)}\n                        width=\"45vw\"\n                        alt=\"img1\"\n                      />\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>{gameSettings.question.answers[1].text}</h4>\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>\n                        {gameSettings.question.answers[1].votes > 0\n                          ? (\n                              (gameSettings.question.answers[1].votes * 100) /\n                              gameSettings.question.totalVotes\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </h4>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"text-center align-middle\">\n                      <img\n                        src={url_emoji(gameSettings.question.answers[2].emoji)}\n                        width=\"45vw\"\n                        alt=\"img1\"\n                      />\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>{gameSettings.question.answers[2].text}</h4>\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>\n                        {gameSettings.question.answers[2].votes > 0\n                          ? (\n                              (gameSettings.question.answers[2].votes * 100) /\n                              gameSettings.question.totalVotes\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </h4>\n                    </td>\n                    <td className=\"text-center align-middle\">\n                      <img\n                        src={url_emoji(gameSettings.question.answers[3].emoji)}\n                        width=\"45vw\"\n                        alt=\"img1\"\n                      />\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>{gameSettings.question.answers[3].text}</h4>\n                    </td>\n                    <td className=\"text-left align-middle\">\n                      <h4>\n                        {gameSettings.question.answers[3].votes > 0\n                          ? (\n                              (gameSettings.question.answers[3].votes * 100) /\n                              gameSettings.question.totalVotes\n                            ).toFixed(1)\n                          : 0}\n                        %\n                      </h4>\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Row>\n            <br />\n            <br />\n            <Row className=\"justify-content-md-center\">\n              <Col xs lg=\"6\" className=\"text-center\">\n                <Button variant={playButton.variant} onClick={pause}>\n                  {playButton.title}\n                </Button>\n              </Col>\n              <Col xs lg=\"6\" className=\"text-center\">\n                <ModalWinner gameSettings={gameSettings} />\n              </Col>\n            </Row>\n          </Container>\n        </GameContext.Provider>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <StartRound gameSettings={gameSettings} />\n      </div>\n    );\n  }\n}\n","import React, { useContext } from \"react\";\nimport GameContext from \"./GameContext.js\";\nimport vsImg from \"./../img/vs.png\";\nimport { ProgressBar, Container, Row, Col } from \"react-bootstrap\";\n\nexport default function LifeBar() {\n  const gameSettings = useContext(GameContext);\n\n  function round() {\n    if (gameSettings.winner) {\n      return \"FINAL\";\n    } else {\n      return \"Round \" + gameSettings.round;\n    }\n  }\n  if (gameSettings) {\n    // console.log(\"gameSettings\", gameSettings.lifeBar);\n    return (\n      <div>\n        <br />\n        <Container fluid>\n          <Row>\n            <Col xs lg=\"5\">\n              <ProgressBar style={{ height: 30 + \"px\" }}>\n                <ProgressBar\n                  variant=\"danger\"\n                  now={\n                    gameSettings.lifeBar.LIFE_STREAMER -\n                    gameSettings.lifeBar.lifeStreamer\n                  }\n                  key={1}\n                />\n                <ProgressBar\n                  variant=\"warning\"\n                  now={gameSettings.lifeBar.lifeStreamer}\n                  key={2}\n                />\n              </ProgressBar>\n            </Col>\n            <Col xs lg=\"2\">\n              <img src={vsImg} width=\"45vw\" alt=\"VS\" />\n            </Col>\n            <Col xs lg=\"5\">\n              <ProgressBar style={{ height: 30 + \"px\" }}>\n                <ProgressBar\n                  variant=\"warning\"\n                  now={gameSettings.lifeBar.lifeChat}\n                  key={1}\n                />\n                <ProgressBar\n                  variant=\"danger\"\n                  now={\n                    gameSettings.lifeBar.LIFE_CHAT -\n                    gameSettings.lifeBar.lifeChat\n                  }\n                  key={2}\n                />\n              </ProgressBar>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs lg=\"2\" className=\"text-left\">\n              <h4>Streamer</h4>\n            </Col>\n            <Col xs lg=\"3\" className=\"text-right\"></Col>\n            <Col xs lg=\"2\" className=\"text-center\">\n              <h4>{round()}</h4>\n            </Col>\n            <Col xs lg=\"3\" className=\"text-left\"></Col>\n            <Col xs lg=\"2\" className=\"text-right\">\n              <h4>Chat</h4>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  } else {\n    return \"Alow\";\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Media from \"./components/Media.js\";\nimport Answers from \"./components/Answers.js\";\nimport socketIOClient from \"socket.io-client\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport SocketContext from \"./components/SocketContext.js\";\nimport GameContext from \"./components/GameContext.js\";\nimport LifeBar from \"./components/LifeBar.js\";\nimport victory from \"./img/victory.gif\";\n\nexport default function App() {\n  const [socket, setSocket] = useState(null);\n  const [gameSettings, setGameSettings] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n  const [youtubeOff, setYoutubeOff] = useState(false);\n\n  useEffect(() => {\n    let idLive = window.location.pathname.split(\"/\")[1];\n    console.log(window.location);\n\n    let url = \"https://multistreamer.xyz:21211?idLive=\" + idLive;\n    // if (window.location.hostname.includes(\"mrguinas\")) {\n    //   url =\n    //     window.location.protocol +\n    //     \"//mrguinas.com.br\" +\n    //     \":21211?idLive=\" +\n    //     idLive +\n    //     \"&now=\" +\n    //     Date.now();\n    // }\n    // url = \"https://localhost:21211?idLive=\" + idLive;\n    console.log(url);\n    const socket = socketIOClient(url);\n    // const socket = socketIOClient(\n    //   window.location.protocol +\n    //     window.location.hostname +\n    //     \":21211!?idLive=\" +\n    //     idLive\n    // );\n    setYoutubeOff(true);\n    setSocket(socket);\n    socket.on(\"gameSettings\", gameSettings => {\n      console.log(gameSettings);\n      setGameSettings(gameSettings);\n      setIsReady(true);\n    });\n    socket.on(\"youtubeOff\", () => {\n      setYoutubeOff(true);\n      setIsReady(false);\n    });\n  }, []);\n\n  function notWorking() {\n    if (youtubeOff) {\n      return \"Utilize http://\" + window.location.hostname + \"/IDLIVEYOUTUBE\";\n    } else {\n      return \"Carregando...\";\n    }\n  }\n  function winner() {\n    return \"O \" + gameSettings.winner + \" VENCEU\";\n  }\n\n  if (isReady) {\n    if (gameSettings.winner) {\n      return (\n        <div className=\"App\">\n          <GameContext.Provider value={gameSettings}>\n            <SocketContext.Provider value={socket}>\n              <LifeBar gameSettings={gameSettings} />\n              <br />\n              <br />\n              <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                  <Col>\n                    <img src={victory} width=\"600vw\" alt=\"VS\" />\n                  </Col>\n                </Row>\n                <br />\n                <Row className=\"justify-content-md-center\">\n                  <Col>\n                    <h1>\n                      <b>{winner()}</b>\n                    </h1>\n                  </Col>\n                </Row>\n              </Container>\n            </SocketContext.Provider>\n          </GameContext.Provider>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <GameContext.Provider value={gameSettings}>\n            <SocketContext.Provider value={socket}>\n              <LifeBar gameSettings={gameSettings} />\n              <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                  {/* <Col>\n                    <Media />\n                  </Col> */}\n                </Row>\n                <br />\n                <br />\n                <Row className=\"justify-content-md-center\">\n                  <Col>\n                    <Answers />\n                  </Col>\n                </Row>\n              </Container>\n            </SocketContext.Provider>\n          </GameContext.Provider>\n        </div>\n      );\n    }\n  } else {\n    return <div>{notWorking()}</div>;\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/trophy.d9db92ab.gif\";","module.exports = __webpack_public_path__ + \"static/media/vs.2433496f.png\";","module.exports = __webpack_public_path__ + \"static/media/victory.59d065af.gif\";"],"sourceRoot":""}